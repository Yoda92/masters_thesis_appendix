/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the InfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfoResponse{}

// InfoResponse struct for InfoResponse
type InfoResponse struct {
	L1Params L1Params `json:"l1Params"`
	// The net id of the node
	PeeringURL string `json:"peeringURL"`
	// The public key of the node (Hex)
	PublicKey string `json:"publicKey"`
	// The version of the node
	Version string `json:"version"`
}

// NewInfoResponse instantiates a new InfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoResponse(l1Params L1Params, peeringURL string, publicKey string, version string) *InfoResponse {
	this := InfoResponse{}
	this.L1Params = l1Params
	this.PeeringURL = peeringURL
	this.PublicKey = publicKey
	this.Version = version
	return &this
}

// NewInfoResponseWithDefaults instantiates a new InfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoResponseWithDefaults() *InfoResponse {
	this := InfoResponse{}
	return &this
}

// GetL1Params returns the L1Params field value
func (o *InfoResponse) GetL1Params() L1Params {
	if o == nil {
		var ret L1Params
		return ret
	}

	return o.L1Params
}

// GetL1ParamsOk returns a tuple with the L1Params field value
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetL1ParamsOk() (*L1Params, bool) {
	if o == nil {
		return nil, false
	}
	return &o.L1Params, true
}

// SetL1Params sets field value
func (o *InfoResponse) SetL1Params(v L1Params) {
	o.L1Params = v
}

// GetPeeringURL returns the PeeringURL field value
func (o *InfoResponse) GetPeeringURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeeringURL
}

// GetPeeringURLOk returns a tuple with the PeeringURL field value
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetPeeringURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeeringURL, true
}

// SetPeeringURL sets field value
func (o *InfoResponse) SetPeeringURL(v string) {
	o.PeeringURL = v
}

// GetPublicKey returns the PublicKey field value
func (o *InfoResponse) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *InfoResponse) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetVersion returns the Version field value
func (o *InfoResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *InfoResponse) SetVersion(v string) {
	o.Version = v
}

func (o InfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["l1Params"] = o.L1Params
	toSerialize["peeringURL"] = o.PeeringURL
	toSerialize["publicKey"] = o.PublicKey
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableInfoResponse struct {
	value *InfoResponse
	isSet bool
}

func (v NullableInfoResponse) Get() *InfoResponse {
	return v.value
}

func (v *NullableInfoResponse) Set(val *InfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoResponse(val *InfoResponse) *NullableInfoResponse {
	return &NullableInfoResponse{value: val, isSet: true}
}

func (v NullableInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


