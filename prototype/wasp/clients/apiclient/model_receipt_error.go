/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the ReceiptError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReceiptError{}

// ReceiptError struct for ReceiptError
type ReceiptError struct {
	// The contract hname (Hex)
	ContractHName string `json:"contractHName"`
	ErrorCode string `json:"errorCode"`
	ErrorId uint32 `json:"errorId"`
	Message string `json:"message"`
	MessageFormat string `json:"messageFormat"`
	Parameters []ErrorParameter `json:"parameters,omitempty"`
}

// NewReceiptError instantiates a new ReceiptError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceiptError(contractHName string, errorCode string, errorId uint32, message string, messageFormat string) *ReceiptError {
	this := ReceiptError{}
	this.ContractHName = contractHName
	this.ErrorCode = errorCode
	this.ErrorId = errorId
	this.Message = message
	this.MessageFormat = messageFormat
	return &this
}

// NewReceiptErrorWithDefaults instantiates a new ReceiptError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiptErrorWithDefaults() *ReceiptError {
	this := ReceiptError{}
	return &this
}

// GetContractHName returns the ContractHName field value
func (o *ReceiptError) GetContractHName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractHName
}

// GetContractHNameOk returns a tuple with the ContractHName field value
// and a boolean to check if the value has been set.
func (o *ReceiptError) GetContractHNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractHName, true
}

// SetContractHName sets field value
func (o *ReceiptError) SetContractHName(v string) {
	o.ContractHName = v
}

// GetErrorCode returns the ErrorCode field value
func (o *ReceiptError) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *ReceiptError) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *ReceiptError) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetErrorId returns the ErrorId field value
func (o *ReceiptError) GetErrorId() uint32 {
	if o == nil {
		var ret uint32
		return ret
	}

	return o.ErrorId
}

// GetErrorIdOk returns a tuple with the ErrorId field value
// and a boolean to check if the value has been set.
func (o *ReceiptError) GetErrorIdOk() (*uint32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorId, true
}

// SetErrorId sets field value
func (o *ReceiptError) SetErrorId(v uint32) {
	o.ErrorId = v
}

// GetMessage returns the Message field value
func (o *ReceiptError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ReceiptError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ReceiptError) SetMessage(v string) {
	o.Message = v
}

// GetMessageFormat returns the MessageFormat field value
func (o *ReceiptError) GetMessageFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageFormat
}

// GetMessageFormatOk returns a tuple with the MessageFormat field value
// and a boolean to check if the value has been set.
func (o *ReceiptError) GetMessageFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageFormat, true
}

// SetMessageFormat sets field value
func (o *ReceiptError) SetMessageFormat(v string) {
	o.MessageFormat = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ReceiptError) GetParameters() []ErrorParameter {
	if o == nil || isNil(o.Parameters) {
		var ret []ErrorParameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptError) GetParametersOk() ([]ErrorParameter, bool) {
	if o == nil || isNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ReceiptError) HasParameters() bool {
	if o != nil && !isNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []ErrorParameter and assigns it to the Parameters field.
func (o *ReceiptError) SetParameters(v []ErrorParameter) {
	o.Parameters = v
}

func (o ReceiptError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReceiptError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contractHName"] = o.ContractHName
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["errorId"] = o.ErrorId
	toSerialize["message"] = o.Message
	toSerialize["messageFormat"] = o.MessageFormat
	if !isNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableReceiptError struct {
	value *ReceiptError
	isSet bool
}

func (v NullableReceiptError) Get() *ReceiptError {
	return v.value
}

func (v *NullableReceiptError) Set(val *ReceiptError) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiptError) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiptError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiptError(val *ReceiptError) *NullableReceiptError {
	return &NullableReceiptError{value: val, isSet: true}
}

func (v NullableReceiptError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiptError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


