/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the BurnRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BurnRecord{}

// BurnRecord struct for BurnRecord
type BurnRecord struct {
	Code int32 `json:"code"`
	GasBurned int64 `json:"gasBurned"`
}

// NewBurnRecord instantiates a new BurnRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBurnRecord(code int32, gasBurned int64) *BurnRecord {
	this := BurnRecord{}
	this.Code = code
	this.GasBurned = gasBurned
	return &this
}

// NewBurnRecordWithDefaults instantiates a new BurnRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBurnRecordWithDefaults() *BurnRecord {
	this := BurnRecord{}
	return &this
}

// GetCode returns the Code field value
func (o *BurnRecord) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *BurnRecord) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *BurnRecord) SetCode(v int32) {
	o.Code = v
}

// GetGasBurned returns the GasBurned field value
func (o *BurnRecord) GetGasBurned() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GasBurned
}

// GetGasBurnedOk returns a tuple with the GasBurned field value
// and a boolean to check if the value has been set.
func (o *BurnRecord) GetGasBurnedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasBurned, true
}

// SetGasBurned sets field value
func (o *BurnRecord) SetGasBurned(v int64) {
	o.GasBurned = v
}

func (o BurnRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BurnRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["gasBurned"] = o.GasBurned
	return toSerialize, nil
}

type NullableBurnRecord struct {
	value *BurnRecord
	isSet bool
}

func (v NullableBurnRecord) Get() *BurnRecord {
	return v.value
}

func (v *NullableBurnRecord) Set(val *BurnRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnRecord(val *BurnRecord) *NullableBurnRecord {
	return &NullableBurnRecord{value: val, isSet: true}
}

func (v NullableBurnRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


