/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the BaseToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseToken{}

// BaseToken struct for BaseToken
type BaseToken struct {
	// The token decimals
	Decimals int32 `json:"decimals"`
	// The base token name
	Name string `json:"name"`
	// The token subunit
	Subunit string `json:"subunit"`
	// The ticker symbol
	TickerSymbol string `json:"tickerSymbol"`
	// The token unit
	Unit string `json:"unit"`
	// Whether or not the token uses a metric prefix
	UseMetricPrefix bool `json:"useMetricPrefix"`
}

// NewBaseToken instantiates a new BaseToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseToken(decimals int32, name string, subunit string, tickerSymbol string, unit string, useMetricPrefix bool) *BaseToken {
	this := BaseToken{}
	this.Decimals = decimals
	this.Name = name
	this.Subunit = subunit
	this.TickerSymbol = tickerSymbol
	this.Unit = unit
	this.UseMetricPrefix = useMetricPrefix
	return &this
}

// NewBaseTokenWithDefaults instantiates a new BaseToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTokenWithDefaults() *BaseToken {
	this := BaseToken{}
	return &this
}

// GetDecimals returns the Decimals field value
func (o *BaseToken) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *BaseToken) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *BaseToken) SetDecimals(v int32) {
	o.Decimals = v
}

// GetName returns the Name field value
func (o *BaseToken) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaseToken) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaseToken) SetName(v string) {
	o.Name = v
}

// GetSubunit returns the Subunit field value
func (o *BaseToken) GetSubunit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subunit
}

// GetSubunitOk returns a tuple with the Subunit field value
// and a boolean to check if the value has been set.
func (o *BaseToken) GetSubunitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subunit, true
}

// SetSubunit sets field value
func (o *BaseToken) SetSubunit(v string) {
	o.Subunit = v
}

// GetTickerSymbol returns the TickerSymbol field value
func (o *BaseToken) GetTickerSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TickerSymbol
}

// GetTickerSymbolOk returns a tuple with the TickerSymbol field value
// and a boolean to check if the value has been set.
func (o *BaseToken) GetTickerSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TickerSymbol, true
}

// SetTickerSymbol sets field value
func (o *BaseToken) SetTickerSymbol(v string) {
	o.TickerSymbol = v
}

// GetUnit returns the Unit field value
func (o *BaseToken) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *BaseToken) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *BaseToken) SetUnit(v string) {
	o.Unit = v
}

// GetUseMetricPrefix returns the UseMetricPrefix field value
func (o *BaseToken) GetUseMetricPrefix() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseMetricPrefix
}

// GetUseMetricPrefixOk returns a tuple with the UseMetricPrefix field value
// and a boolean to check if the value has been set.
func (o *BaseToken) GetUseMetricPrefixOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseMetricPrefix, true
}

// SetUseMetricPrefix sets field value
func (o *BaseToken) SetUseMetricPrefix(v bool) {
	o.UseMetricPrefix = v
}

func (o BaseToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["decimals"] = o.Decimals
	toSerialize["name"] = o.Name
	toSerialize["subunit"] = o.Subunit
	toSerialize["tickerSymbol"] = o.TickerSymbol
	toSerialize["unit"] = o.Unit
	toSerialize["useMetricPrefix"] = o.UseMetricPrefix
	return toSerialize, nil
}

type NullableBaseToken struct {
	value *BaseToken
	isSet bool
}

func (v NullableBaseToken) Get() *BaseToken {
	return v.value
}

func (v *NullableBaseToken) Set(val *BaseToken) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseToken) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseToken(val *BaseToken) *NullableBaseToken {
	return &NullableBaseToken{value: val, isSet: true}
}

func (v NullableBaseToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


