/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the UnresolvedVMError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnresolvedVMError{}

// UnresolvedVMError struct for UnresolvedVMError
type UnresolvedVMError struct {
	Code *VMErrorCode `json:"code,omitempty"`
	Hash *int32 `json:"hash,omitempty"`
	Params []string `json:"params,omitempty"`
}

// NewUnresolvedVMError instantiates a new UnresolvedVMError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnresolvedVMError() *UnresolvedVMError {
	this := UnresolvedVMError{}
	return &this
}

// NewUnresolvedVMErrorWithDefaults instantiates a new UnresolvedVMError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnresolvedVMErrorWithDefaults() *UnresolvedVMError {
	this := UnresolvedVMError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UnresolvedVMError) GetCode() VMErrorCode {
	if o == nil || isNil(o.Code) {
		var ret VMErrorCode
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnresolvedVMError) GetCodeOk() (*VMErrorCode, bool) {
	if o == nil || isNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UnresolvedVMError) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given VMErrorCode and assigns it to the Code field.
func (o *UnresolvedVMError) SetCode(v VMErrorCode) {
	o.Code = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *UnresolvedVMError) GetHash() int32 {
	if o == nil || isNil(o.Hash) {
		var ret int32
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnresolvedVMError) GetHashOk() (*int32, bool) {
	if o == nil || isNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *UnresolvedVMError) HasHash() bool {
	if o != nil && !isNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given int32 and assigns it to the Hash field.
func (o *UnresolvedVMError) SetHash(v int32) {
	o.Hash = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *UnresolvedVMError) GetParams() []string {
	if o == nil || isNil(o.Params) {
		var ret []string
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnresolvedVMError) GetParamsOk() ([]string, bool) {
	if o == nil || isNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *UnresolvedVMError) HasParams() bool {
	if o != nil && !isNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given []string and assigns it to the Params field.
func (o *UnresolvedVMError) SetParams(v []string) {
	o.Params = v
}

func (o UnresolvedVMError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnresolvedVMError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !isNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

type NullableUnresolvedVMError struct {
	value *UnresolvedVMError
	isSet bool
}

func (v NullableUnresolvedVMError) Get() *UnresolvedVMError {
	return v.value
}

func (v *NullableUnresolvedVMError) Set(val *UnresolvedVMError) {
	v.value = val
	v.isSet = true
}

func (v NullableUnresolvedVMError) IsSet() bool {
	return v.isSet
}

func (v *NullableUnresolvedVMError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnresolvedVMError(val *UnresolvedVMError) *NullableUnresolvedVMError {
	return &NullableUnresolvedVMError{value: val, isSet: true}
}

func (v NullableUnresolvedVMError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnresolvedVMError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


