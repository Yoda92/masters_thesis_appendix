/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the MilestoneInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MilestoneInfo{}

// MilestoneInfo struct for MilestoneInfo
type MilestoneInfo struct {
	Index *uint32 `json:"index,omitempty"`
	MilestoneId *string `json:"milestoneId,omitempty"`
	Timestamp *uint32 `json:"timestamp,omitempty"`
}

// NewMilestoneInfo instantiates a new MilestoneInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMilestoneInfo() *MilestoneInfo {
	this := MilestoneInfo{}
	return &this
}

// NewMilestoneInfoWithDefaults instantiates a new MilestoneInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMilestoneInfoWithDefaults() *MilestoneInfo {
	this := MilestoneInfo{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *MilestoneInfo) GetIndex() uint32 {
	if o == nil || isNil(o.Index) {
		var ret uint32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MilestoneInfo) GetIndexOk() (*uint32, bool) {
	if o == nil || isNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *MilestoneInfo) HasIndex() bool {
	if o != nil && !isNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given uint32 and assigns it to the Index field.
func (o *MilestoneInfo) SetIndex(v uint32) {
	o.Index = &v
}

// GetMilestoneId returns the MilestoneId field value if set, zero value otherwise.
func (o *MilestoneInfo) GetMilestoneId() string {
	if o == nil || isNil(o.MilestoneId) {
		var ret string
		return ret
	}
	return *o.MilestoneId
}

// GetMilestoneIdOk returns a tuple with the MilestoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MilestoneInfo) GetMilestoneIdOk() (*string, bool) {
	if o == nil || isNil(o.MilestoneId) {
		return nil, false
	}
	return o.MilestoneId, true
}

// HasMilestoneId returns a boolean if a field has been set.
func (o *MilestoneInfo) HasMilestoneId() bool {
	if o != nil && !isNil(o.MilestoneId) {
		return true
	}

	return false
}

// SetMilestoneId gets a reference to the given string and assigns it to the MilestoneId field.
func (o *MilestoneInfo) SetMilestoneId(v string) {
	o.MilestoneId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MilestoneInfo) GetTimestamp() uint32 {
	if o == nil || isNil(o.Timestamp) {
		var ret uint32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MilestoneInfo) GetTimestampOk() (*uint32, bool) {
	if o == nil || isNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MilestoneInfo) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given uint32 and assigns it to the Timestamp field.
func (o *MilestoneInfo) SetTimestamp(v uint32) {
	o.Timestamp = &v
}

func (o MilestoneInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MilestoneInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !isNil(o.MilestoneId) {
		toSerialize["milestoneId"] = o.MilestoneId
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableMilestoneInfo struct {
	value *MilestoneInfo
	isSet bool
}

func (v NullableMilestoneInfo) Get() *MilestoneInfo {
	return v.value
}

func (v *NullableMilestoneInfo) Set(val *MilestoneInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMilestoneInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMilestoneInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMilestoneInfo(val *MilestoneInfo) *NullableMilestoneInfo {
	return &NullableMilestoneInfo{value: val, isSet: true}
}

func (v NullableMilestoneInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMilestoneInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


