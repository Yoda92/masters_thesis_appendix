/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the PeeringNodeStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeeringNodeStatusResponse{}

// PeeringNodeStatusResponse struct for PeeringNodeStatusResponse
type PeeringNodeStatusResponse struct {
	// Whether or not the peer is activated
	IsAlive bool `json:"isAlive"`
	IsTrusted bool `json:"isTrusted"`
	Name string `json:"name"`
	// The amount of users attached to the peer
	NumUsers int32 `json:"numUsers"`
	// The peering URL of the peer
	PeeringURL string `json:"peeringURL"`
	// The peers public key encoded in Hex
	PublicKey string `json:"publicKey"`
}

// NewPeeringNodeStatusResponse instantiates a new PeeringNodeStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringNodeStatusResponse(isAlive bool, isTrusted bool, name string, numUsers int32, peeringURL string, publicKey string) *PeeringNodeStatusResponse {
	this := PeeringNodeStatusResponse{}
	this.IsAlive = isAlive
	this.IsTrusted = isTrusted
	this.Name = name
	this.NumUsers = numUsers
	this.PeeringURL = peeringURL
	this.PublicKey = publicKey
	return &this
}

// NewPeeringNodeStatusResponseWithDefaults instantiates a new PeeringNodeStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringNodeStatusResponseWithDefaults() *PeeringNodeStatusResponse {
	this := PeeringNodeStatusResponse{}
	return &this
}

// GetIsAlive returns the IsAlive field value
func (o *PeeringNodeStatusResponse) GetIsAlive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAlive
}

// GetIsAliveOk returns a tuple with the IsAlive field value
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetIsAliveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAlive, true
}

// SetIsAlive sets field value
func (o *PeeringNodeStatusResponse) SetIsAlive(v bool) {
	o.IsAlive = v
}

// GetIsTrusted returns the IsTrusted field value
func (o *PeeringNodeStatusResponse) GetIsTrusted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTrusted
}

// GetIsTrustedOk returns a tuple with the IsTrusted field value
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetIsTrustedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTrusted, true
}

// SetIsTrusted sets field value
func (o *PeeringNodeStatusResponse) SetIsTrusted(v bool) {
	o.IsTrusted = v
}

// GetName returns the Name field value
func (o *PeeringNodeStatusResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PeeringNodeStatusResponse) SetName(v string) {
	o.Name = v
}

// GetNumUsers returns the NumUsers field value
func (o *PeeringNodeStatusResponse) GetNumUsers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumUsers
}

// GetNumUsersOk returns a tuple with the NumUsers field value
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetNumUsersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumUsers, true
}

// SetNumUsers sets field value
func (o *PeeringNodeStatusResponse) SetNumUsers(v int32) {
	o.NumUsers = v
}

// GetPeeringURL returns the PeeringURL field value
func (o *PeeringNodeStatusResponse) GetPeeringURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeeringURL
}

// GetPeeringURLOk returns a tuple with the PeeringURL field value
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetPeeringURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeeringURL, true
}

// SetPeeringURL sets field value
func (o *PeeringNodeStatusResponse) SetPeeringURL(v string) {
	o.PeeringURL = v
}

// GetPublicKey returns the PublicKey field value
func (o *PeeringNodeStatusResponse) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *PeeringNodeStatusResponse) SetPublicKey(v string) {
	o.PublicKey = v
}

func (o PeeringNodeStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeeringNodeStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isAlive"] = o.IsAlive
	toSerialize["isTrusted"] = o.IsTrusted
	toSerialize["name"] = o.Name
	toSerialize["numUsers"] = o.NumUsers
	toSerialize["peeringURL"] = o.PeeringURL
	toSerialize["publicKey"] = o.PublicKey
	return toSerialize, nil
}

type NullablePeeringNodeStatusResponse struct {
	value *PeeringNodeStatusResponse
	isSet bool
}

func (v NullablePeeringNodeStatusResponse) Get() *PeeringNodeStatusResponse {
	return v.value
}

func (v *NullablePeeringNodeStatusResponse) Set(val *PeeringNodeStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringNodeStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringNodeStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringNodeStatusResponse(val *PeeringNodeStatusResponse) *NullablePeeringNodeStatusResponse {
	return &NullablePeeringNodeStatusResponse{value: val, isSet: true}
}

func (v NullablePeeringNodeStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringNodeStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


