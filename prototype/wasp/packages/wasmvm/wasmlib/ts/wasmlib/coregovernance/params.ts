// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

import * as wasmtypes from '../wasmtypes';
import * as sc from './index';

export class ImmutableAddAllowedStateControllerAddressParams extends wasmtypes.ScProxy {
    // state controller address
    address(): wasmtypes.ScImmutableAddress {
        return new wasmtypes.ScImmutableAddress(this.proxy.root(sc.ParamAddress));
    }
}

export class MutableAddAllowedStateControllerAddressParams extends wasmtypes.ScProxy {
    // state controller address
    address(): wasmtypes.ScMutableAddress {
        return new wasmtypes.ScMutableAddress(this.proxy.root(sc.ParamAddress));
    }
}

export class ImmutableAddCandidateNodeParams extends wasmtypes.ScProxy {
    // API base URL for the node, default empty
    accessAPI(): wasmtypes.ScImmutableString {
        return new wasmtypes.ScImmutableString(this.proxy.root(sc.ParamAccessAPI));
    }

    // whether node is just an access node, default false
    accessOnly(): wasmtypes.ScImmutableBool {
        return new wasmtypes.ScImmutableBool(this.proxy.root(sc.ParamAccessOnly));
    }

    // signed binary containing both the node public key and their L1 address
    certificate(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ParamCertificate));
    }

    // public key of the node to be added
    pubKey(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ParamPubKey));
    }
}

export class MutableAddCandidateNodeParams extends wasmtypes.ScProxy {
    // API base URL for the node, default empty
    accessAPI(): wasmtypes.ScMutableString {
        return new wasmtypes.ScMutableString(this.proxy.root(sc.ParamAccessAPI));
    }

    // whether node is just an access node, default false
    accessOnly(): wasmtypes.ScMutableBool {
        return new wasmtypes.ScMutableBool(this.proxy.root(sc.ParamAccessOnly));
    }

    // signed binary containing both the node public key and their L1 address
    certificate(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ParamCertificate));
    }

    // public key of the node to be added
    pubKey(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ParamPubKey));
    }
}

export class MapBytesToImmutableUint8 extends wasmtypes.ScProxy {

    getUint8(key: Uint8Array): wasmtypes.ScImmutableUint8 {
        return new wasmtypes.ScImmutableUint8(this.proxy.key(wasmtypes.bytesToBytes(key)));
    }
}

export class ImmutableChangeAccessNodesParams extends wasmtypes.ScProxy {
    // map of actions per pubkey
    // 0: Remove the access node from the access nodes list.
    // 1: Accept a candidate node and add it to the list of access nodes.
    // 2: Drop an access node from the access node and candidate lists.
    actions(): sc.MapBytesToImmutableUint8 {
        return new sc.MapBytesToImmutableUint8(this.proxy.root(sc.ParamActions));
    }
}

export class MapBytesToMutableUint8 extends wasmtypes.ScProxy {

    clear(): void {
        this.proxy.clearMap();
    }

    getUint8(key: Uint8Array): wasmtypes.ScMutableUint8 {
        return new wasmtypes.ScMutableUint8(this.proxy.key(wasmtypes.bytesToBytes(key)));
    }
}

export class MutableChangeAccessNodesParams extends wasmtypes.ScProxy {
    // map of actions per pubkey
    // 0: Remove the access node from the access nodes list.
    // 1: Accept a candidate node and add it to the list of access nodes.
    // 2: Drop an access node from the access node and candidate lists.
    actions(): sc.MapBytesToMutableUint8 {
        return new sc.MapBytesToMutableUint8(this.proxy.root(sc.ParamActions));
    }
}

export class ImmutableDelegateChainOwnershipParams extends wasmtypes.ScProxy {
    // next chain owner's agent ID
    chainOwner(): wasmtypes.ScImmutableAgentID {
        return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.ParamChainOwner));
    }
}

export class MutableDelegateChainOwnershipParams extends wasmtypes.ScProxy {
    // next chain owner's agent ID
    chainOwner(): wasmtypes.ScMutableAgentID {
        return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.ParamChainOwner));
    }
}

export class ImmutableRemoveAllowedStateControllerAddressParams extends wasmtypes.ScProxy {
    // state controller address
    address(): wasmtypes.ScImmutableAddress {
        return new wasmtypes.ScImmutableAddress(this.proxy.root(sc.ParamAddress));
    }
}

export class MutableRemoveAllowedStateControllerAddressParams extends wasmtypes.ScProxy {
    // state controller address
    address(): wasmtypes.ScMutableAddress {
        return new wasmtypes.ScMutableAddress(this.proxy.root(sc.ParamAddress));
    }
}

export class ImmutableRevokeAccessNodeParams extends wasmtypes.ScProxy {
    // certificate of the node to be removed
    certificate(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ParamCertificate));
    }

    // public key of the node to be removed
    pubKey(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ParamPubKey));
    }
}

export class MutableRevokeAccessNodeParams extends wasmtypes.ScProxy {
    // certificate of the node to be removed
    certificate(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ParamCertificate));
    }

    // public key of the node to be removed
    pubKey(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ParamPubKey));
    }
}

export class ImmutableRotateStateControllerParams extends wasmtypes.ScProxy {
    // state controller address
    address(): wasmtypes.ScImmutableAddress {
        return new wasmtypes.ScImmutableAddress(this.proxy.root(sc.ParamAddress));
    }
}

export class MutableRotateStateControllerParams extends wasmtypes.ScProxy {
    // state controller address
    address(): wasmtypes.ScMutableAddress {
        return new wasmtypes.ScMutableAddress(this.proxy.root(sc.ParamAddress));
    }
}

export class ImmutableSetEVMGasRatioParams extends wasmtypes.ScProxy {
    // serialized gas ratio
    gasRatio(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ParamGasRatio));
    }
}

export class MutableSetEVMGasRatioParams extends wasmtypes.ScProxy {
    // serialized gas ratio
    gasRatio(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ParamGasRatio));
    }
}

export class ImmutableSetFeePolicyParams extends wasmtypes.ScProxy {
    // serialized fee policy
    feePolicy(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ParamFeePolicy));
    }
}

export class MutableSetFeePolicyParams extends wasmtypes.ScProxy {
    // serialized fee policy
    feePolicy(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ParamFeePolicy));
    }
}

export class ImmutableSetGasLimitsParams extends wasmtypes.ScProxy {
    // serialized gas limits
    gasLimits(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ParamGasLimits));
    }
}

export class MutableSetGasLimitsParams extends wasmtypes.ScProxy {
    // serialized gas limits
    gasLimits(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ParamGasLimits));
    }
}

export class ImmutableSetMetadataParams extends wasmtypes.ScProxy {
    // the public evm json rpc url
    metadata(): sc.ImmutablePublicChainMetadata {
        return new sc.ImmutablePublicChainMetadata(this.proxy.root(sc.ParamMetadata));
    }

    // the public url leading to the chain info, stored on the tangle
    publicURL(): wasmtypes.ScImmutableString {
        return new wasmtypes.ScImmutableString(this.proxy.root(sc.ParamPublicURL));
    }
}

export class MutableSetMetadataParams extends wasmtypes.ScProxy {
    // the public evm json rpc url
    metadata(): sc.MutablePublicChainMetadata {
        return new sc.MutablePublicChainMetadata(this.proxy.root(sc.ParamMetadata));
    }

    // the public url leading to the chain info, stored on the tangle
    publicURL(): wasmtypes.ScMutableString {
        return new wasmtypes.ScMutableString(this.proxy.root(sc.ParamPublicURL));
    }
}

export class ImmutableSetMinSDParams extends wasmtypes.ScProxy {
    setMinSD(): wasmtypes.ScImmutableUint64 {
        return new wasmtypes.ScImmutableUint64(this.proxy.root(sc.ParamSetMinSD));
    }
}

export class MutableSetMinSDParams extends wasmtypes.ScProxy {
    setMinSD(): wasmtypes.ScMutableUint64 {
        return new wasmtypes.ScMutableUint64(this.proxy.root(sc.ParamSetMinSD));
    }
}

export class ImmutableSetPayoutAgentIDParams extends wasmtypes.ScProxy {
    // set payout AgentID
    payoutAgentID(): wasmtypes.ScImmutableAgentID {
        return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.ParamPayoutAgentID));
    }
}

export class MutableSetPayoutAgentIDParams extends wasmtypes.ScProxy {
    // set payout AgentID
    payoutAgentID(): wasmtypes.ScMutableAgentID {
        return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.ParamPayoutAgentID));
    }
}
