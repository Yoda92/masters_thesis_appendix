// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

import * as wasmtypes from '../wasmtypes';
import * as sc from './index';

export class ImmutableStoreBlobResults extends wasmtypes.ScProxy {
    // calculated hash of blob chunks
    hash(): wasmtypes.ScImmutableHash {
        return new wasmtypes.ScImmutableHash(this.proxy.root(sc.ResultHash));
    }
}

export class MutableStoreBlobResults extends wasmtypes.ScProxy {
    // calculated hash of blob chunks
    hash(): wasmtypes.ScMutableHash {
        return new wasmtypes.ScMutableHash(this.proxy.root(sc.ResultHash));
    }
}

export class ImmutableGetBlobFieldResults extends wasmtypes.ScProxy {
    // data for named chunk
    bytes(): wasmtypes.ScImmutableBytes {
        return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ResultBytes));
    }
}

export class MutableGetBlobFieldResults extends wasmtypes.ScProxy {
    // data for named chunk
    bytes(): wasmtypes.ScMutableBytes {
        return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ResultBytes));
    }
}

export class MapStringToImmutableInt32 extends wasmtypes.ScProxy {

    getInt32(key: string): wasmtypes.ScImmutableInt32 {
        return new wasmtypes.ScImmutableInt32(this.proxy.key(wasmtypes.stringToBytes(key)));
    }
}

export class ImmutableGetBlobInfoResults extends wasmtypes.ScProxy {
    // sizes for each named chunk
    blobSizes(): sc.MapStringToImmutableInt32 {
        return new sc.MapStringToImmutableInt32(this.proxy);
    }
}

export class MapStringToMutableInt32 extends wasmtypes.ScProxy {

    clear(): void {
        this.proxy.clearMap();
    }

    getInt32(key: string): wasmtypes.ScMutableInt32 {
        return new wasmtypes.ScMutableInt32(this.proxy.key(wasmtypes.stringToBytes(key)));
    }
}

export class MutableGetBlobInfoResults extends wasmtypes.ScProxy {
    // sizes for each named chunk
    blobSizes(): sc.MapStringToMutableInt32 {
        return new sc.MapStringToMutableInt32(this.proxy);
    }
}

export class MapHashToImmutableInt32 extends wasmtypes.ScProxy {

    getInt32(key: wasmtypes.ScHash): wasmtypes.ScImmutableInt32 {
        return new wasmtypes.ScImmutableInt32(this.proxy.key(wasmtypes.hashToBytes(key)));
    }
}

export class ImmutableListBlobsResults extends wasmtypes.ScProxy {
    // sizes for each blob hash
    blobSizes(): sc.MapHashToImmutableInt32 {
        return new sc.MapHashToImmutableInt32(this.proxy);
    }
}

export class MapHashToMutableInt32 extends wasmtypes.ScProxy {

    clear(): void {
        this.proxy.clearMap();
    }

    getInt32(key: wasmtypes.ScHash): wasmtypes.ScMutableInt32 {
        return new wasmtypes.ScMutableInt32(this.proxy.key(wasmtypes.hashToBytes(key)));
    }
}

export class MutableListBlobsResults extends wasmtypes.ScProxy {
    // sizes for each blob hash
    blobSizes(): sc.MapHashToMutableInt32 {
        return new sc.MapHashToMutableInt32(this.proxy);
    }
}
