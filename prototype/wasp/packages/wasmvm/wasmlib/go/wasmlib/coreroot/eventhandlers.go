// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

package coreroot

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var coreRootHandlers = map[string]func(*CoreRootEventHandlers, *wasmtypes.WasmDecoder){
	"coreroot.deploy": func(evt *CoreRootEventHandlers, dec *wasmtypes.WasmDecoder) { evt.onCoreRootDeployThunk(dec) },
	"coreroot.grant": func(evt *CoreRootEventHandlers, dec *wasmtypes.WasmDecoder) { evt.onCoreRootGrantThunk(dec) },
	"coreroot.revoke": func(evt *CoreRootEventHandlers, dec *wasmtypes.WasmDecoder) { evt.onCoreRootRevokeThunk(dec) },
}

type CoreRootEventHandlers struct {
	myID uint32
	deploy func(e *EventDeploy)
	grant func(e *EventGrant)
	revoke func(e *EventRevoke)
}

var _ wasmlib.IEventHandlers = new(CoreRootEventHandlers)

func NewCoreRootEventHandlers() *CoreRootEventHandlers {
	return &CoreRootEventHandlers{ myID: wasmlib.EventHandlersGenerateID() }
}

func (h *CoreRootEventHandlers) CallHandler(topic string, dec *wasmtypes.WasmDecoder) {
	handler := coreRootHandlers[topic]
	if handler != nil {
		handler(h, dec)
	}
}

func (h *CoreRootEventHandlers) ID() uint32 {
	return h.myID
}

func (h *CoreRootEventHandlers) OnCoreRootDeploy(handler func(e *EventDeploy)) {
	h.deploy = handler
}

func (h *CoreRootEventHandlers) OnCoreRootGrant(handler func(e *EventGrant)) {
	h.grant = handler
}

func (h *CoreRootEventHandlers) OnCoreRootRevoke(handler func(e *EventRevoke)) {
	h.revoke = handler
}

type EventDeploy struct {
	Timestamp uint64
	Name string
	ProgHash wasmtypes.ScHash
}

func (h *CoreRootEventHandlers) onCoreRootDeployThunk(dec *wasmtypes.WasmDecoder) {
	if h.deploy == nil {
		return
	}
	e := &EventDeploy{}
	e.Timestamp = wasmtypes.Uint64Decode(dec)
	e.Name = wasmtypes.StringDecode(dec)
	e.ProgHash = wasmtypes.HashDecode(dec)
	dec.Close()
	h.deploy(e)
}

type EventGrant struct {
	Timestamp uint64
	Deployer wasmtypes.ScAgentID
}

func (h *CoreRootEventHandlers) onCoreRootGrantThunk(dec *wasmtypes.WasmDecoder) {
	if h.grant == nil {
		return
	}
	e := &EventGrant{}
	e.Timestamp = wasmtypes.Uint64Decode(dec)
	e.Deployer = wasmtypes.AgentIDDecode(dec)
	dec.Close()
	h.grant(e)
}

type EventRevoke struct {
	Timestamp uint64
	Deployer wasmtypes.ScAgentID
}

func (h *CoreRootEventHandlers) onCoreRootRevokeThunk(dec *wasmtypes.WasmDecoder) {
	if h.revoke == nil {
		return
	}
	e := &EventRevoke{}
	e.Timestamp = wasmtypes.Uint64Decode(dec)
	e.Deployer = wasmtypes.AgentIDDecode(dec)
	dec.Close()
	h.revoke(e)
}
