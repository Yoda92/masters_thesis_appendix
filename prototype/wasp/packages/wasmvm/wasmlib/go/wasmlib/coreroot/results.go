// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

package coreroot

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

type ImmutableFindContractResults struct {
	Proxy wasmtypes.Proxy
}

// whether the contract exists.
func (s ImmutableFindContractResults) ContractFound() wasmtypes.ScImmutableBool {
	return wasmtypes.NewScImmutableBool(s.Proxy.Root(ResultContractFound))
}

// encoded contract record (if exists)
func (s ImmutableFindContractResults) ContractRecData() wasmtypes.ScImmutableBytes {
	return wasmtypes.NewScImmutableBytes(s.Proxy.Root(ResultContractRecData))
}

type MutableFindContractResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableFindContractResults() MutableFindContractResults {
	return MutableFindContractResults{Proxy: wasmlib.NewResultsProxy()}
}

// whether the contract exists.
func (s MutableFindContractResults) ContractFound() wasmtypes.ScMutableBool {
	return wasmtypes.NewScMutableBool(s.Proxy.Root(ResultContractFound))
}

// encoded contract record (if exists)
func (s MutableFindContractResults) ContractRecData() wasmtypes.ScMutableBytes {
	return wasmtypes.NewScMutableBytes(s.Proxy.Root(ResultContractRecData))
}

type MapHnameToImmutableBytes struct {
	Proxy wasmtypes.Proxy
}

func (m MapHnameToImmutableBytes) GetBytes(key wasmtypes.ScHname) wasmtypes.ScImmutableBytes {
	return wasmtypes.NewScImmutableBytes(m.Proxy.Key(wasmtypes.HnameToBytes(key)))
}

type ImmutableGetContractRecordsResults struct {
	Proxy wasmtypes.Proxy
}

// contract records by Hname
func (s ImmutableGetContractRecordsResults) ContractRegistry() MapHnameToImmutableBytes {
	return MapHnameToImmutableBytes{Proxy: s.Proxy.Root(ResultContractRegistry)}
}

type MapHnameToMutableBytes struct {
	Proxy wasmtypes.Proxy
}

func (m MapHnameToMutableBytes) Clear() {
	m.Proxy.ClearMap()
}

func (m MapHnameToMutableBytes) GetBytes(key wasmtypes.ScHname) wasmtypes.ScMutableBytes {
	return wasmtypes.NewScMutableBytes(m.Proxy.Key(wasmtypes.HnameToBytes(key)))
}

type MutableGetContractRecordsResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetContractRecordsResults() MutableGetContractRecordsResults {
	return MutableGetContractRecordsResults{Proxy: wasmlib.NewResultsProxy()}
}

// contract records by Hname
func (s MutableGetContractRecordsResults) ContractRegistry() MapHnameToMutableBytes {
	return MapHnameToMutableBytes{Proxy: s.Proxy.Root(ResultContractRegistry)}
}
