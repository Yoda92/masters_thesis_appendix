// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

package coreblob

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var coreBlobHandlers = map[string]func(*CoreBlobEventHandlers, *wasmtypes.WasmDecoder){
	"coreblob.store": func(evt *CoreBlobEventHandlers, dec *wasmtypes.WasmDecoder) { evt.onCoreBlobStoreThunk(dec) },
}

type CoreBlobEventHandlers struct {
	myID uint32
	store func(e *EventStore)
}

var _ wasmlib.IEventHandlers = new(CoreBlobEventHandlers)

func NewCoreBlobEventHandlers() *CoreBlobEventHandlers {
	return &CoreBlobEventHandlers{ myID: wasmlib.EventHandlersGenerateID() }
}

func (h *CoreBlobEventHandlers) CallHandler(topic string, dec *wasmtypes.WasmDecoder) {
	handler := coreBlobHandlers[topic]
	if handler != nil {
		handler(h, dec)
	}
}

func (h *CoreBlobEventHandlers) ID() uint32 {
	return h.myID
}

func (h *CoreBlobEventHandlers) OnCoreBlobStore(handler func(e *EventStore)) {
	h.store = handler
}

type EventStore struct {
	Timestamp uint64
	BlobHash wasmtypes.ScHash
}

func (h *CoreBlobEventHandlers) onCoreBlobStoreThunk(dec *wasmtypes.WasmDecoder) {
	if h.store == nil {
		return
	}
	e := &EventStore{}
	e.Timestamp = wasmtypes.Uint64Decode(dec)
	e.BlobHash = wasmtypes.HashDecode(dec)
	dec.Close()
	h.store(e)
}
