# Copyright 2020 IOTA Stiftung
# SPDX-License-Identifier: Apache-2.0
copyright:

name: CoreBlockLog
version: 1.0.11
description: Block log contract

author: Eric Hop <eric@iota.org>
license: Apache-2.0
repository: https://github.com/iotaledger/wasp

structs: {}
typedefs: {}
state: {}
funcs: {}
views:

  # Returns the current state controller and governing addresses and at what block index they were set.
  controlAddresses:
    results:
      stateControllerAddress=s: Address # state controller address
      governingAddress=g: Address # governing address
      blockIndex=n: Uint32 # index of block where the addresses were set

  # Returns information about the given block.
  getBlockInfo:
    params:
      blockIndex=n: Uint32? # default last block
    results:
      blockIndex=n: Uint32 # index of returned block
      blockInfo=i: Bytes # serialized block info

  # Returns the list of events triggered during the execution of the given block.
  getEventsForBlock:
    params:
      blockIndex=n: Uint32? # default last block
    results:
      event=e: Bytes[] # Array of serialized events

  # Returns the list of events triggered by the given contract
  # during the execution of the given block range.
  getEventsForContract:
    params:
      contractHname=h: Hname
      fromBlock=f: Uint32? # default first block
      toBlock=t: Uint32? # default last block
    results:
      event=e: Bytes[] # Array of serialized events

  # Returns the list of events triggered during the execution of the given request.
  getEventsForRequest:
    params:
      requestID=u: RequestID # target request ID
    results:
      event=e: Bytes[] # Array of serialized events

  # Returns a list with all request IDs in the given block.
  getRequestIDsForBlock:
    params:
      blockIndex=n: Uint32? # default last block
    results:
      blockIndex=n: Uint32 # index of block containing request
      requestID=u: RequestID[] # Array of request IDs

  # Returns the receipt for the request with the given ID.
  getRequestReceipt:
    params:
      requestID=u: RequestID # target request ID
    results:
      blockIndex=n: Uint32 # index of block containing request
      requestIndex=r: Uint16 # index within block containing request
      requestReceipt=d: Bytes # serialized request receipt

  # Returns all request receipts in the given block.
  getRequestReceiptsForBlock:
    params:
      blockIndex=n: Uint32? # default last block
    results:
      blockIndex=n: Uint32 # index of block containing request
      requestReceipts=d: Bytes[] # Array of request receipts

  # Returns whether the request with ID u has been processed.
  isRequestProcessed:
    params:
      requestID=u: RequestID # target request ID
    results:
      requestProcessed=p: Bool # whether request has been processed
