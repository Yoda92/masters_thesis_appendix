# Copyright 2020 IOTA Stiftung
# SPDX-License-Identifier: Apache-2.0
copyright:

name: CoreAccounts
version: 1.0.11
description: Chain account ledger contract

author: Eric Hop <eric@iota.org>
license: Apache-2.0
repository: https://github.com/iotaledger/wasp

events:
  foundryCreated:
    foundrySN: Uint32
  foundryDestroyed:
    foundrySN: Uint32
  foundryModified:
    foundrySN: Uint32
structs: {}
typedefs: {}
state: {}
funcs:

  # A no-op that has the side effect of crediting any transferred tokens to the sender's account.
  deposit: {}

  # Creates a new foundry with the specified token scheme, and assigns the foundry to the sender.
  foundryCreateNew:
    params:
      tokenScheme=t: Bytes # token scheme for the new foundry
    results:
      foundrySN=s: Uint32 # serial number of the newly created foundry

  # Destroys a given foundry output on L1, reimbursing the storage deposit to the caller.
  # The foundry must be owned by the caller.
  foundryDestroy:
    params:
      foundrySN=s: Uint32 # serial number of the foundry

  # Mints or destroys tokens for the given foundry, which must be owned by the caller.
  foundryModifySupply:
    params:
      foundrySN=s: Uint32 # serial number of the foundry
      supplyDeltaAbs=d: BigInt # positive nonzero amount to mint or destroy
      destroyTokens=y: Bool? # mint (default) or destroy tokens

  # Transfers the specified allowance from the sender SC's L2 account on
  # the target chain to the sender SC's L2 account on the origin chain.
  transferAccountToChain:
    params:
      # Optional gas amount to reserve in the allowance for the internal
      # call to transferAllowanceTo(). Default 10_000 (MinGasFee).
      gasReserve=g: Uint64?

  # Transfers the specified allowance from the sender's L2 account
  # to the given L2 account on the chain.
  transferAllowanceTo:
    params:
      agentID=a: AgentID # The target L2 account

  # Moves tokens from the caller's on-chain account to the caller's L1 address.
  # The number of tokens to be withdrawn must be specified via the allowance of the request.
  withdraw: {}

views:
  # Returns a set of all agent IDs that own assets on the chain.
  accounts:
    results:
      allAccounts=this: map[AgentID]Bool # agent IDs

  # Returns a set of all foundries owned by the given account.
  accountFoundries:
    params:
      agentID=a: AgentID # account agent ID
    results:
      foundries=this: map[Uint32]Bool # foundry serial numbers owned by the given account

  # Returns the amount of NFTs owned by the given account.
  accountNFTAmount:
    params:
      agentID=a: AgentID # account agent ID
    results:
      amount=A: Uint32 # amount of NFTs owned by the account

  # Returns the NFT IDs for all NFTs owned by the given account.
  accountNFTs:
    params:
      agentID=a: AgentID # account agent ID
    results:
      nftIDs=i: NftID[] # NFT IDs owned by the account

  # Returns the amount of NFTs in the specified collection owned by the given account.
  accountNFTAmountInCollection:
    params:
      agentID=a: AgentID # account agent ID
      collection=C: NftID # NFT ID of collection
    results:
      amount=A: Uint32 # amount of NFTs in collection owned by the account

  # Returns the NFT IDs for all NFTs in the specified collection owned by the given account.
  accountNFTsInCollection:
    params:
      agentID=a: AgentID # account agent ID
      collection=C: NftID # NFT ID of collection
    results:
      nftIDs=i: NftID[] # NFT IDs in collection owned by the account

  # Returns the fungible tokens owned by the given Agent ID on the chain.
  balance:
    params:
      agentID=a: AgentID # account agent ID
    results:
      # balance per token ID, zero length indicates base token
      balances=this: map[TokenID]BigInt

  # Returns the amount of base tokens owned by an agent on the chain
  balanceBaseToken:
    params:
      agentID=a: AgentID # account agent ID
    results:
      balance=B: Uint64 # amount of base tokens in the account

  # Returns the amount of specific native tokens owned by an agent on the chain
  balanceNativeToken:
    params:
      agentID=a: AgentID # account agent ID
      tokenID=N: TokenID # native token ID
    results:
      tokens=B: BigInt # amount of native tokens in the account

  # Returns specified foundry output in serialized form.
  foundryOutput:
    params:
      foundrySN=s: Uint32 # serial number of the foundry
    results:
      foundryOutputBin=b: Bytes # serialized foundry output

  # Returns the current account nonce for an Agent.
  # The account nonce is used to issue unique off-ledger requests.
  getAccountNonce:
    params:
      agentID=a: AgentID # account agent ID
    results:
      accountNonce=n: Uint64 # account nonce

  # Returns a set of all native tokenIDs that are owned by the chain.
  getNativeTokenIDRegistry:
    results:
      mapping=this: map[TokenID]Bool # token IDs

  # Returns the data for a given NFT that is on the chain.
  nftData:
    params:
      nftID=z: NftID # NFT ID
    results:
      nftData=e: Bytes # serialized NFT data

  # Returns the balances of all fungible tokens controlled by the chain.
  totalAssets:
    results:
      # balance per token ID, zero length indicates base token
      assets=this: map[TokenID]BigInt
