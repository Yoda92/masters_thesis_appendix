// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

import * as wasmlib from '../index';
import * as sc from './index';

export class ControlAddressesCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableControlAddressesResults = new sc.ImmutableControlAddressesResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewControlAddresses);
    }
}

export class GetBlockInfoCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetBlockInfoParams = new sc.MutableGetBlockInfoParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetBlockInfoResults = new sc.ImmutableGetBlockInfoResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetBlockInfo);
    }
}

export class GetEventsForBlockCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetEventsForBlockParams = new sc.MutableGetEventsForBlockParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetEventsForBlockResults = new sc.ImmutableGetEventsForBlockResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetEventsForBlock);
    }
}

export class GetEventsForContractCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetEventsForContractParams = new sc.MutableGetEventsForContractParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetEventsForContractResults = new sc.ImmutableGetEventsForContractResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetEventsForContract);
    }
}

export class GetEventsForRequestCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetEventsForRequestParams = new sc.MutableGetEventsForRequestParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetEventsForRequestResults = new sc.ImmutableGetEventsForRequestResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetEventsForRequest);
    }
}

export class GetRequestIDsForBlockCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetRequestIDsForBlockParams = new sc.MutableGetRequestIDsForBlockParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetRequestIDsForBlockResults = new sc.ImmutableGetRequestIDsForBlockResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetRequestIDsForBlock);
    }
}

export class GetRequestReceiptCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetRequestReceiptParams = new sc.MutableGetRequestReceiptParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetRequestReceiptResults = new sc.ImmutableGetRequestReceiptResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetRequestReceipt);
    }
}

export class GetRequestReceiptsForBlockCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetRequestReceiptsForBlockParams = new sc.MutableGetRequestReceiptsForBlockParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetRequestReceiptsForBlockResults = new sc.ImmutableGetRequestReceiptsForBlockResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetRequestReceiptsForBlock);
    }
}

export class IsRequestProcessedCall {
    func:    wasmlib.ScView;
    params:  sc.MutableIsRequestProcessedParams = new sc.MutableIsRequestProcessedParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableIsRequestProcessedResults = new sc.ImmutableIsRequestProcessedResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewIsRequestProcessed);
    }
}

export class ScFuncs {
    // Returns the current state controller and governing addresses and at what block index they were set.
    static controlAddresses(ctx: wasmlib.ScViewClientContext): ControlAddressesCall {
        const f = new ControlAddressesCall(ctx);
        f.results = new sc.ImmutableControlAddressesResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns information about the given block.
    static getBlockInfo(ctx: wasmlib.ScViewClientContext): GetBlockInfoCall {
        const f = new GetBlockInfoCall(ctx);
        f.params = new sc.MutableGetBlockInfoParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetBlockInfoResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns the list of events triggered during the execution of the given block.
    static getEventsForBlock(ctx: wasmlib.ScViewClientContext): GetEventsForBlockCall {
        const f = new GetEventsForBlockCall(ctx);
        f.params = new sc.MutableGetEventsForBlockParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetEventsForBlockResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns the list of events triggered by the given contract
    // during the execution of the given block range.
    static getEventsForContract(ctx: wasmlib.ScViewClientContext): GetEventsForContractCall {
        const f = new GetEventsForContractCall(ctx);
        f.params = new sc.MutableGetEventsForContractParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetEventsForContractResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns the list of events triggered during the execution of the given request.
    static getEventsForRequest(ctx: wasmlib.ScViewClientContext): GetEventsForRequestCall {
        const f = new GetEventsForRequestCall(ctx);
        f.params = new sc.MutableGetEventsForRequestParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetEventsForRequestResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns a list with all request IDs in the given block.
    static getRequestIDsForBlock(ctx: wasmlib.ScViewClientContext): GetRequestIDsForBlockCall {
        const f = new GetRequestIDsForBlockCall(ctx);
        f.params = new sc.MutableGetRequestIDsForBlockParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetRequestIDsForBlockResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns the receipt for the request with the given ID.
    static getRequestReceipt(ctx: wasmlib.ScViewClientContext): GetRequestReceiptCall {
        const f = new GetRequestReceiptCall(ctx);
        f.params = new sc.MutableGetRequestReceiptParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetRequestReceiptResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns all request receipts in the given block.
    static getRequestReceiptsForBlock(ctx: wasmlib.ScViewClientContext): GetRequestReceiptsForBlockCall {
        const f = new GetRequestReceiptsForBlockCall(ctx);
        f.params = new sc.MutableGetRequestReceiptsForBlockParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetRequestReceiptsForBlockResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    // Returns whether the request with ID u has been processed.
    static isRequestProcessed(ctx: wasmlib.ScViewClientContext): IsRequestProcessedCall {
        const f = new IsRequestProcessedCall(ctx);
        f.params = new sc.MutableIsRequestProcessedParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableIsRequestProcessedResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }
}
