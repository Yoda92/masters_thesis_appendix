// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use std::collections::HashMap;

use crate::*;

use crate::*;

pub struct CoreAccountsEventHandlers {
    my_id: u32,
    core_accounts_handlers: HashMap<&'static str, fn(evt: &CoreAccountsEventHandlers, dec: &mut WasmDecoder)>,

    foundry_created: Box<dyn Fn(&EventFoundryCreated)>,
    foundry_destroyed: Box<dyn Fn(&EventFoundryDestroyed)>,
    foundry_modified: Box<dyn Fn(&EventFoundryModified)>,
}

impl IEventHandlers for CoreAccountsEventHandlers {
    fn call_handler(&self, topic: &str, dec: &mut WasmDecoder) {
        if let Some(handler) = self.core_accounts_handlers.get(topic) {
            handler(self, dec);
        }
    }

    fn id(&self) -> u32 {
        self.my_id
    }
}

unsafe impl Send for CoreAccountsEventHandlers {}
unsafe impl Sync for CoreAccountsEventHandlers {}

impl CoreAccountsEventHandlers {
    pub fn new() -> CoreAccountsEventHandlers {
        let mut handlers: HashMap<&str, fn(evt: &CoreAccountsEventHandlers, dec: &mut WasmDecoder)> = HashMap::new();
        handlers.insert("coreaccounts.foundryCreated", |e, m| { (e.foundry_created)(&EventFoundryCreated::new(m)); });
        handlers.insert("coreaccounts.foundryDestroyed", |e, m| { (e.foundry_destroyed)(&EventFoundryDestroyed::new(m)); });
        handlers.insert("coreaccounts.foundryModified", |e, m| { (e.foundry_modified)(&EventFoundryModified::new(m)); });
        return CoreAccountsEventHandlers {
            my_id: EventHandlers::generate_id(),
            core_accounts_handlers: handlers,
            foundry_created: Box::new(|_e| {}),
            foundry_destroyed: Box::new(|_e| {}),
            foundry_modified: Box::new(|_e| {}),
        };
    }

    pub fn on_core_accounts_foundry_created<F>(&mut self, handler: F)
        where F: Fn(&EventFoundryCreated) + 'static {
        self.foundry_created = Box::new(handler);
    }

    pub fn on_core_accounts_foundry_destroyed<F>(&mut self, handler: F)
        where F: Fn(&EventFoundryDestroyed) + 'static {
        self.foundry_destroyed = Box::new(handler);
    }

    pub fn on_core_accounts_foundry_modified<F>(&mut self, handler: F)
        where F: Fn(&EventFoundryModified) + 'static {
        self.foundry_modified = Box::new(handler);
    }
}

pub struct EventFoundryCreated {
    pub timestamp: u64,
    pub foundry_sn: u32,
}

impl EventFoundryCreated {
    pub fn new(dec: &mut WasmDecoder) -> EventFoundryCreated {
        EventFoundryCreated {
            timestamp: uint64_decode(dec),
            foundry_sn: uint32_decode(dec),
        }
    }
}

pub struct EventFoundryDestroyed {
    pub timestamp: u64,
    pub foundry_sn: u32,
}

impl EventFoundryDestroyed {
    pub fn new(dec: &mut WasmDecoder) -> EventFoundryDestroyed {
        EventFoundryDestroyed {
            timestamp: uint64_decode(dec),
            foundry_sn: uint32_decode(dec),
        }
    }
}

pub struct EventFoundryModified {
    pub timestamp: u64,
    pub foundry_sn: u32,
}

impl EventFoundryModified {
    pub fn new(dec: &mut WasmDecoder) -> EventFoundryModified {
        EventFoundryModified {
            timestamp: uint64_decode(dec),
            foundry_sn: uint32_decode(dec),
        }
    }
}
