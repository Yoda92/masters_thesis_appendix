// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::coreblob::*;

#[derive(Clone)]
pub struct ImmutableStoreBlobResults {
    pub proxy: Proxy,
}

impl ImmutableStoreBlobResults {
    // calculated hash of blob chunks
    pub fn hash(&self) -> ScImmutableHash {
        ScImmutableHash::new(self.proxy.root(RESULT_HASH))
    }
}

#[derive(Clone)]
pub struct MutableStoreBlobResults {
    pub proxy: Proxy,
}

impl MutableStoreBlobResults {
    pub fn new() -> MutableStoreBlobResults {
        MutableStoreBlobResults {
            proxy: results_proxy(),
        }
    }

    // calculated hash of blob chunks
    pub fn hash(&self) -> ScMutableHash {
        ScMutableHash::new(self.proxy.root(RESULT_HASH))
    }
}

#[derive(Clone)]
pub struct ImmutableGetBlobFieldResults {
    pub proxy: Proxy,
}

impl ImmutableGetBlobFieldResults {
    // data for named chunk
    pub fn bytes(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(RESULT_BYTES))
    }
}

#[derive(Clone)]
pub struct MutableGetBlobFieldResults {
    pub proxy: Proxy,
}

impl MutableGetBlobFieldResults {
    pub fn new() -> MutableGetBlobFieldResults {
        MutableGetBlobFieldResults {
            proxy: results_proxy(),
        }
    }

    // data for named chunk
    pub fn bytes(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(RESULT_BYTES))
    }
}

#[derive(Clone)]
pub struct MapStringToImmutableInt32 {
    pub(crate) proxy: Proxy,
}

impl MapStringToImmutableInt32 {
    pub fn get_int32(&self, key: &str) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ImmutableGetBlobInfoResults {
    pub proxy: Proxy,
}

impl ImmutableGetBlobInfoResults {
    // sizes for each named chunk
    pub fn blob_sizes(&self) -> MapStringToImmutableInt32 {
        MapStringToImmutableInt32 { proxy: self.proxy.clone() }
    }
}

#[derive(Clone)]
pub struct MapStringToMutableInt32 {
    pub(crate) proxy: Proxy,
}

impl MapStringToMutableInt32 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_int32(&self, key: &str) -> ScMutableInt32 {
        ScMutableInt32::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MutableGetBlobInfoResults {
    pub proxy: Proxy,
}

impl MutableGetBlobInfoResults {
    pub fn new() -> MutableGetBlobInfoResults {
        MutableGetBlobInfoResults {
            proxy: results_proxy(),
        }
    }

    // sizes for each named chunk
    pub fn blob_sizes(&self) -> MapStringToMutableInt32 {
        MapStringToMutableInt32 { proxy: self.proxy.clone() }
    }
}

#[derive(Clone)]
pub struct MapHashToImmutableInt32 {
    pub(crate) proxy: Proxy,
}

impl MapHashToImmutableInt32 {
    pub fn get_int32(&self, key: &ScHash) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.proxy.key(&hash_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ImmutableListBlobsResults {
    pub proxy: Proxy,
}

impl ImmutableListBlobsResults {
    // sizes for each blob hash
    pub fn blob_sizes(&self) -> MapHashToImmutableInt32 {
        MapHashToImmutableInt32 { proxy: self.proxy.clone() }
    }
}

#[derive(Clone)]
pub struct MapHashToMutableInt32 {
    pub(crate) proxy: Proxy,
}

impl MapHashToMutableInt32 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_int32(&self, key: &ScHash) -> ScMutableInt32 {
        ScMutableInt32::new(self.proxy.key(&hash_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MutableListBlobsResults {
    pub proxy: Proxy,
}

impl MutableListBlobsResults {
    pub fn new() -> MutableListBlobsResults {
        MutableListBlobsResults {
            proxy: results_proxy(),
        }
    }

    // sizes for each blob hash
    pub fn blob_sizes(&self) -> MapHashToMutableInt32 {
        MapHashToMutableInt32 { proxy: self.proxy.clone() }
    }
}
