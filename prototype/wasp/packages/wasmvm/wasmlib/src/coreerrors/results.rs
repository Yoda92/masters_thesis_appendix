// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::coreerrors::*;

#[derive(Clone)]
pub struct ImmutableRegisterErrorResults {
    pub proxy: Proxy,
}

impl ImmutableRegisterErrorResults {
    // serialized error code
    pub fn error_code(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(RESULT_ERROR_CODE))
    }
}

#[derive(Clone)]
pub struct MutableRegisterErrorResults {
    pub proxy: Proxy,
}

impl MutableRegisterErrorResults {
    pub fn new() -> MutableRegisterErrorResults {
        MutableRegisterErrorResults {
            proxy: results_proxy(),
        }
    }

    // serialized error code
    pub fn error_code(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(RESULT_ERROR_CODE))
    }
}

#[derive(Clone)]
pub struct ImmutableGetErrorMessageFormatResults {
    pub proxy: Proxy,
}

impl ImmutableGetErrorMessageFormatResults {
    // error message template string
    pub fn template(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(RESULT_TEMPLATE))
    }
}

#[derive(Clone)]
pub struct MutableGetErrorMessageFormatResults {
    pub proxy: Proxy,
}

impl MutableGetErrorMessageFormatResults {
    pub fn new() -> MutableGetErrorMessageFormatResults {
        MutableGetErrorMessageFormatResults {
            proxy: results_proxy(),
        }
    }

    // error message template string
    pub fn template(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(RESULT_TEMPLATE))
    }
}
