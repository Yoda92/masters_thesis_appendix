// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

#![allow(dead_code)]

use crate::*;
use crate::coreroot::*;

pub struct DeployContractCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableDeployContractParams,
}

pub struct GrantDeployPermissionCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableGrantDeployPermissionParams,
}

pub struct RequireDeployPermissionsCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableRequireDeployPermissionsParams,
}

pub struct RevokeDeployPermissionCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableRevokeDeployPermissionParams,
}

pub struct FindContractCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableFindContractParams,
    pub results: ImmutableFindContractResults,
}

pub struct GetContractRecordsCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetContractRecordsResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    // Deploys a non-EVM smart contract on the chain if the caller has deployment permission.
    pub fn deploy_contract(ctx: &impl ScFuncClientContext) -> DeployContractCall {
        let mut f = DeployContractCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_DEPLOY_CONTRACT),
            params:  MutableDeployContractParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Grants deploy permission to an agent.
    pub fn grant_deploy_permission(ctx: &impl ScFuncClientContext) -> GrantDeployPermissionCall {
        let mut f = GrantDeployPermissionCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_GRANT_DEPLOY_PERMISSION),
            params:  MutableGrantDeployPermissionParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Enable or disable deploy permission check
    pub fn require_deploy_permissions(ctx: &impl ScFuncClientContext) -> RequireDeployPermissionsCall {
        let mut f = RequireDeployPermissionsCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_REQUIRE_DEPLOY_PERMISSIONS),
            params:  MutableRequireDeployPermissionsParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Revokes deploy permission for an agent.
    pub fn revoke_deploy_permission(ctx: &impl ScFuncClientContext) -> RevokeDeployPermissionCall {
        let mut f = RevokeDeployPermissionCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_REVOKE_DEPLOY_PERMISSION),
            params:  MutableRevokeDeployPermissionParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Returns the record for a given smart contract
    pub fn find_contract(ctx: &impl ScViewClientContext) -> FindContractCall {
        let mut f = FindContractCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_FIND_CONTRACT),
            params:  MutableFindContractParams { proxy: Proxy::nil() },
            results: ImmutableFindContractResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns the list of all smart contracts deployed on the chain and their records.
    pub fn get_contract_records(ctx: &impl ScViewClientContext) -> GetContractRecordsCall {
        let mut f = GetContractRecordsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_CONTRACT_RECORDS),
            results: ImmutableGetContractRecordsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
