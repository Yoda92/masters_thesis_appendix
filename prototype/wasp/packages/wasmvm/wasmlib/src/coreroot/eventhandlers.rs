// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use std::collections::HashMap;

use crate::*;

use crate::*;

pub struct CoreRootEventHandlers {
    my_id: u32,
    core_root_handlers: HashMap<&'static str, fn(evt: &CoreRootEventHandlers, dec: &mut WasmDecoder)>,

    deploy: Box<dyn Fn(&EventDeploy)>,
    grant: Box<dyn Fn(&EventGrant)>,
    revoke: Box<dyn Fn(&EventRevoke)>,
}

impl IEventHandlers for CoreRootEventHandlers {
    fn call_handler(&self, topic: &str, dec: &mut WasmDecoder) {
        if let Some(handler) = self.core_root_handlers.get(topic) {
            handler(self, dec);
        }
    }

    fn id(&self) -> u32 {
        self.my_id
    }
}

unsafe impl Send for CoreRootEventHandlers {}
unsafe impl Sync for CoreRootEventHandlers {}

impl CoreRootEventHandlers {
    pub fn new() -> CoreRootEventHandlers {
        let mut handlers: HashMap<&str, fn(evt: &CoreRootEventHandlers, dec: &mut WasmDecoder)> = HashMap::new();
        handlers.insert("coreroot.deploy", |e, m| { (e.deploy)(&EventDeploy::new(m)); });
        handlers.insert("coreroot.grant", |e, m| { (e.grant)(&EventGrant::new(m)); });
        handlers.insert("coreroot.revoke", |e, m| { (e.revoke)(&EventRevoke::new(m)); });
        return CoreRootEventHandlers {
            my_id: EventHandlers::generate_id(),
            core_root_handlers: handlers,
            deploy: Box::new(|_e| {}),
            grant: Box::new(|_e| {}),
            revoke: Box::new(|_e| {}),
        };
    }

    pub fn on_core_root_deploy<F>(&mut self, handler: F)
        where F: Fn(&EventDeploy) + 'static {
        self.deploy = Box::new(handler);
    }

    pub fn on_core_root_grant<F>(&mut self, handler: F)
        where F: Fn(&EventGrant) + 'static {
        self.grant = Box::new(handler);
    }

    pub fn on_core_root_revoke<F>(&mut self, handler: F)
        where F: Fn(&EventRevoke) + 'static {
        self.revoke = Box::new(handler);
    }
}

pub struct EventDeploy {
    pub timestamp: u64,
    pub name: String,
    pub prog_hash: ScHash,
}

impl EventDeploy {
    pub fn new(dec: &mut WasmDecoder) -> EventDeploy {
        EventDeploy {
            timestamp: uint64_decode(dec),
            name: string_decode(dec),
            prog_hash: hash_decode(dec),
        }
    }
}

pub struct EventGrant {
    pub timestamp: u64,
    pub deployer: ScAgentID,
}

impl EventGrant {
    pub fn new(dec: &mut WasmDecoder) -> EventGrant {
        EventGrant {
            timestamp: uint64_decode(dec),
            deployer: agent_id_decode(dec),
        }
    }
}

pub struct EventRevoke {
    pub timestamp: u64,
    pub deployer: ScAgentID,
}

impl EventRevoke {
    pub fn new(dec: &mut WasmDecoder) -> EventRevoke {
        EventRevoke {
            timestamp: uint64_decode(dec),
            deployer: agent_id_decode(dec),
        }
    }
}
