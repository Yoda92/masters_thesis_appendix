// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

#![allow(dead_code)]

use crate::*;
use crate::coregovernance::*;

pub struct AddAllowedStateControllerAddressCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableAddAllowedStateControllerAddressParams,
}

pub struct AddCandidateNodeCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableAddCandidateNodeParams,
}

pub struct ChangeAccessNodesCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableChangeAccessNodesParams,
}

pub struct ClaimChainOwnershipCall<'a> {
    pub func: ScFunc<'a>,
}

pub struct DelegateChainOwnershipCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableDelegateChainOwnershipParams,
}

pub struct RemoveAllowedStateControllerAddressCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableRemoveAllowedStateControllerAddressParams,
}

pub struct RevokeAccessNodeCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableRevokeAccessNodeParams,
}

pub struct RotateStateControllerCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableRotateStateControllerParams,
}

pub struct SetEVMGasRatioCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableSetEVMGasRatioParams,
}

pub struct SetFeePolicyCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableSetFeePolicyParams,
}

pub struct SetGasLimitsCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableSetGasLimitsParams,
}

pub struct SetMetadataCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableSetMetadataParams,
}

pub struct SetMinSDCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableSetMinSDParams,
}

pub struct SetPayoutAgentIDCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableSetPayoutAgentIDParams,
}

pub struct StartMaintenanceCall<'a> {
    pub func: ScFunc<'a>,
}

pub struct StopMaintenanceCall<'a> {
    pub func: ScFunc<'a>,
}

pub struct GetAllowedStateControllerAddressesCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetAllowedStateControllerAddressesResults,
}

pub struct GetChainInfoCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetChainInfoResults,
}

pub struct GetChainNodesCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetChainNodesResults,
}

pub struct GetChainOwnerCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetChainOwnerResults,
}

pub struct GetEVMGasRatioCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetEVMGasRatioResults,
}

pub struct GetFeePolicyCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetFeePolicyResults,
}

pub struct GetGasLimitsCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetGasLimitsResults,
}

pub struct GetMaintenanceStatusCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetMaintenanceStatusResults,
}

pub struct GetMetadataCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetMetadataResults,
}

pub struct GetMinSDCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetMinSDResults,
}

pub struct GetPayoutAgentIDCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetPayoutAgentIDResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    // Adds the given address to the list of identities that constitute the state controller.
    pub fn add_allowed_state_controller_address(ctx: &impl ScFuncClientContext) -> AddAllowedStateControllerAddressCall {
        let mut f = AddAllowedStateControllerAddressCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_ADD_ALLOWED_STATE_CONTROLLER_ADDRESS),
            params:  MutableAddAllowedStateControllerAddressParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Adds a node to the list of candidates.
    pub fn add_candidate_node(ctx: &impl ScFuncClientContext) -> AddCandidateNodeCall {
        let mut f = AddCandidateNodeCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_ADD_CANDIDATE_NODE),
            params:  MutableAddCandidateNodeParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Iterates through the given map of actions and applies them.
    pub fn change_access_nodes(ctx: &impl ScFuncClientContext) -> ChangeAccessNodesCall {
        let mut f = ChangeAccessNodesCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_CHANGE_ACCESS_NODES),
            params:  MutableChangeAccessNodesParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Claims the ownership of the chain if the caller matches the identity
    // that was set in delegateChainOwnership().
    pub fn claim_chain_ownership(ctx: &impl ScFuncClientContext) -> ClaimChainOwnershipCall {
        ClaimChainOwnershipCall {
            func: ScFunc::new(ctx, HSC_NAME, HFUNC_CLAIM_CHAIN_OWNERSHIP),
        }
    }

    // Sets the Agent ID o as the new owner for the chain.
    // This change will only be effective once claimChainOwnership() is called by o.
    pub fn delegate_chain_ownership(ctx: &impl ScFuncClientContext) -> DelegateChainOwnershipCall {
        let mut f = DelegateChainOwnershipCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_DELEGATE_CHAIN_OWNERSHIP),
            params:  MutableDelegateChainOwnershipParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Removes the given address from the list of identities that constitute the state controller.
    pub fn remove_allowed_state_controller_address(ctx: &impl ScFuncClientContext) -> RemoveAllowedStateControllerAddressCall {
        let mut f = RemoveAllowedStateControllerAddressCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_REMOVE_ALLOWED_STATE_CONTROLLER_ADDRESS),
            params:  MutableRemoveAllowedStateControllerAddressParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Removes a node from the list of candidates.
    pub fn revoke_access_node(ctx: &impl ScFuncClientContext) -> RevokeAccessNodeCall {
        let mut f = RevokeAccessNodeCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_REVOKE_ACCESS_NODE),
            params:  MutableRevokeAccessNodeParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Called when the committee is about to be rotated to the given address.
    // If it succeeds, the next state transition will become a governance transition,
    // thus updating the state controller in the chain's Alias Output.
    // If it fails, nothing happens.
    pub fn rotate_state_controller(ctx: &impl ScFuncClientContext) -> RotateStateControllerCall {
        let mut f = RotateStateControllerCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_ROTATE_STATE_CONTROLLER),
            params:  MutableRotateStateControllerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Sets the EVM gas ratio for the chain.
    pub fn set_evm_gas_ratio(ctx: &impl ScFuncClientContext) -> SetEVMGasRatioCall {
        let mut f = SetEVMGasRatioCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SET_EVM_GAS_RATIO),
            params:  MutableSetEVMGasRatioParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Sets the fee policy for the chain.
    pub fn set_fee_policy(ctx: &impl ScFuncClientContext) -> SetFeePolicyCall {
        let mut f = SetFeePolicyCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SET_FEE_POLICY),
            params:  MutableSetFeePolicyParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Sets the gas limits for the chain.
    pub fn set_gas_limits(ctx: &impl ScFuncClientContext) -> SetGasLimitsCall {
        let mut f = SetGasLimitsCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SET_GAS_LIMITS),
            params:  MutableSetGasLimitsParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Changes optional extra metadata that is appended to the L1 AliasOutput.
    pub fn set_metadata(ctx: &impl ScFuncClientContext) -> SetMetadataCall {
        let mut f = SetMetadataCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SET_METADATA),
            params:  MutableSetMetadataParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_min_sd(ctx: &impl ScFuncClientContext) -> SetMinSDCall {
        let mut f = SetMinSDCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SET_MIN_SD),
            params:  MutableSetMinSDParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_payout_agent_id(ctx: &impl ScFuncClientContext) -> SetPayoutAgentIDCall {
        let mut f = SetPayoutAgentIDCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SET_PAYOUT_AGENT_ID),
            params:  MutableSetPayoutAgentIDParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    // Starts the chain maintenance mode, meaning no further requests
    // will be processed except calls to the governance contract.
    pub fn start_maintenance(ctx: &impl ScFuncClientContext) -> StartMaintenanceCall {
        StartMaintenanceCall {
            func: ScFunc::new(ctx, HSC_NAME, HFUNC_START_MAINTENANCE),
        }
    }

    // Stops the maintenance mode.
    pub fn stop_maintenance(ctx: &impl ScFuncClientContext) -> StopMaintenanceCall {
        StopMaintenanceCall {
            func: ScFunc::new(ctx, HSC_NAME, HFUNC_STOP_MAINTENANCE),
        }
    }

    // Returns the list of allowed state controllers.
    pub fn get_allowed_state_controller_addresses(ctx: &impl ScViewClientContext) -> GetAllowedStateControllerAddressesCall {
        let mut f = GetAllowedStateControllerAddressesCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_ALLOWED_STATE_CONTROLLER_ADDRESSES),
            results: ImmutableGetAllowedStateControllerAddressesResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns information about the chain.
    pub fn get_chain_info(ctx: &impl ScViewClientContext) -> GetChainInfoCall {
        let mut f = GetChainInfoCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_CHAIN_INFO),
            results: ImmutableGetChainInfoResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns the current access nodes and candidates.
    pub fn get_chain_nodes(ctx: &impl ScViewClientContext) -> GetChainNodesCall {
        let mut f = GetChainNodesCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_CHAIN_NODES),
            results: ImmutableGetChainNodesResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns the AgentID of the chain owner.
    pub fn get_chain_owner(ctx: &impl ScViewClientContext) -> GetChainOwnerCall {
        let mut f = GetChainOwnerCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_CHAIN_OWNER),
            results: ImmutableGetChainOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns the EVM gas ratio.
    pub fn get_evm_gas_ratio(ctx: &impl ScViewClientContext) -> GetEVMGasRatioCall {
        let mut f = GetEVMGasRatioCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_EVM_GAS_RATIO),
            results: ImmutableGetEVMGasRatioResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns the fee policy.
    pub fn get_fee_policy(ctx: &impl ScViewClientContext) -> GetFeePolicyCall {
        let mut f = GetFeePolicyCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_FEE_POLICY),
            results: ImmutableGetFeePolicyResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns the gas limits.
    pub fn get_gas_limits(ctx: &impl ScViewClientContext) -> GetGasLimitsCall {
        let mut f = GetGasLimitsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_GAS_LIMITS),
            results: ImmutableGetGasLimitsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns whether the chain is undergoing maintenance.
    pub fn get_maintenance_status(ctx: &impl ScViewClientContext) -> GetMaintenanceStatusCall {
        let mut f = GetMaintenanceStatusCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_MAINTENANCE_STATUS),
            results: ImmutableGetMaintenanceStatusResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    // Returns the extra metadata that is added to the chain AliasOutput.
    pub fn get_metadata(ctx: &impl ScViewClientContext) -> GetMetadataCall {
        let mut f = GetMetadataCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_METADATA),
            results: ImmutableGetMetadataResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_min_sd(ctx: &impl ScViewClientContext) -> GetMinSDCall {
        let mut f = GetMinSDCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_MIN_SD),
            results: ImmutableGetMinSDResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_payout_agent_id(ctx: &impl ScViewClientContext) -> GetPayoutAgentIDCall {
        let mut f = GetPayoutAgentIDCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_PAYOUT_AGENT_ID),
            results: ImmutableGetPayoutAgentIDResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
