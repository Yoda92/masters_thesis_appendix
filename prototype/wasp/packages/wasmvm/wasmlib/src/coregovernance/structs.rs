// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;

#[derive(Clone)]
pub struct PublicChainMetadata {
    pub description        : String,
    pub evm_json_rpcurl    : String,
    pub evm_web_socket_url : String,
    pub name               : String,
    pub website            : String,
}

impl PublicChainMetadata {
    pub fn from_bytes(bytes: &[u8]) -> PublicChainMetadata {
        let mut dec = WasmDecoder::new(bytes);
        PublicChainMetadata {
            description        : string_decode(&mut dec),
            evm_json_rpcurl    : string_decode(&mut dec),
            evm_web_socket_url : string_decode(&mut dec),
            name               : string_decode(&mut dec),
            website            : string_decode(&mut dec),
        }
    }

    pub fn to_bytes(&self) -> Vec<u8> {
        let mut enc = WasmEncoder::new();
        string_encode(&mut enc, &self.description);
        string_encode(&mut enc, &self.evm_json_rpcurl);
        string_encode(&mut enc, &self.evm_web_socket_url);
        string_encode(&mut enc, &self.name);
        string_encode(&mut enc, &self.website);
        enc.buf()
    }
}

#[derive(Clone)]
pub struct ImmutablePublicChainMetadata {
    pub(crate) proxy: Proxy,
}

impl ImmutablePublicChainMetadata {
    pub fn exists(&self) -> bool {
        self.proxy.exists()
    }

    pub fn value(&self) -> PublicChainMetadata {
        PublicChainMetadata::from_bytes(&self.proxy.get())
    }
}

#[derive(Clone)]
pub struct MutablePublicChainMetadata {
    pub(crate) proxy: Proxy,
}

impl MutablePublicChainMetadata {
    pub fn delete(&self) {
        self.proxy.delete();
    }

    pub fn exists(&self) -> bool {
        self.proxy.exists()
    }

    pub fn set_value(&self, value: &PublicChainMetadata) {
        self.proxy.set(&value.to_bytes());
    }

    pub fn value(&self) -> PublicChainMetadata {
        PublicChainMetadata::from_bytes(&self.proxy.get())
    }
}
