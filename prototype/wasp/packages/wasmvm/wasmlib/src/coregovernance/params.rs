// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::coregovernance::*;

#[derive(Clone)]
pub struct ImmutableAddAllowedStateControllerAddressParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableAddAllowedStateControllerAddressParams {
    pub fn new() -> ImmutableAddAllowedStateControllerAddressParams {
        ImmutableAddAllowedStateControllerAddressParams {
            proxy: params_proxy(),
        }
    }

    // state controller address
    pub fn address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
    }
}

#[derive(Clone)]
pub struct MutableAddAllowedStateControllerAddressParams {
    pub(crate) proxy: Proxy,
}

impl MutableAddAllowedStateControllerAddressParams {
    // state controller address
    pub fn address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
    }
}

#[derive(Clone)]
pub struct ImmutableAddCandidateNodeParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableAddCandidateNodeParams {
    pub fn new() -> ImmutableAddCandidateNodeParams {
        ImmutableAddCandidateNodeParams {
            proxy: params_proxy(),
        }
    }

    // API base URL for the node, default empty
    pub fn access_api(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_ACCESS_API))
    }

    // whether node is just an access node, default false
    pub fn access_only(&self) -> ScImmutableBool {
        ScImmutableBool::new(self.proxy.root(PARAM_ACCESS_ONLY))
    }

    // signed binary containing both the node public key and their L1 address
    pub fn certificate(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(PARAM_CERTIFICATE))
    }

    // public key of the node to be added
    pub fn pub_key(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(PARAM_PUB_KEY))
    }
}

#[derive(Clone)]
pub struct MutableAddCandidateNodeParams {
    pub(crate) proxy: Proxy,
}

impl MutableAddCandidateNodeParams {
    // API base URL for the node, default empty
    pub fn access_api(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_ACCESS_API))
    }

    // whether node is just an access node, default false
    pub fn access_only(&self) -> ScMutableBool {
        ScMutableBool::new(self.proxy.root(PARAM_ACCESS_ONLY))
    }

    // signed binary containing both the node public key and their L1 address
    pub fn certificate(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(PARAM_CERTIFICATE))
    }

    // public key of the node to be added
    pub fn pub_key(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(PARAM_PUB_KEY))
    }
}

#[derive(Clone)]
pub struct MapBytesToImmutableUint8 {
    pub(crate) proxy: Proxy,
}

impl MapBytesToImmutableUint8 {
    pub fn get_uint8(&self, key: &[u8]) -> ScImmutableUint8 {
        ScImmutableUint8::new(self.proxy.key(&bytes_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ImmutableChangeAccessNodesParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableChangeAccessNodesParams {
    pub fn new() -> ImmutableChangeAccessNodesParams {
        ImmutableChangeAccessNodesParams {
            proxy: params_proxy(),
        }
    }

    // map of actions per pubkey
    // 0: Remove the access node from the access nodes list.
    // 1: Accept a candidate node and add it to the list of access nodes.
    // 2: Drop an access node from the access node and candidate lists.
    pub fn actions(&self) -> MapBytesToImmutableUint8 {
        MapBytesToImmutableUint8 { proxy: self.proxy.root(PARAM_ACTIONS) }
    }
}

#[derive(Clone)]
pub struct MapBytesToMutableUint8 {
    pub(crate) proxy: Proxy,
}

impl MapBytesToMutableUint8 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_uint8(&self, key: &[u8]) -> ScMutableUint8 {
        ScMutableUint8::new(self.proxy.key(&bytes_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MutableChangeAccessNodesParams {
    pub(crate) proxy: Proxy,
}

impl MutableChangeAccessNodesParams {
    // map of actions per pubkey
    // 0: Remove the access node from the access nodes list.
    // 1: Accept a candidate node and add it to the list of access nodes.
    // 2: Drop an access node from the access node and candidate lists.
    pub fn actions(&self) -> MapBytesToMutableUint8 {
        MapBytesToMutableUint8 { proxy: self.proxy.root(PARAM_ACTIONS) }
    }
}

#[derive(Clone)]
pub struct ImmutableDelegateChainOwnershipParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableDelegateChainOwnershipParams {
    pub fn new() -> ImmutableDelegateChainOwnershipParams {
        ImmutableDelegateChainOwnershipParams {
            proxy: params_proxy(),
        }
    }

    // next chain owner's agent ID
    pub fn chain_owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableDelegateChainOwnershipParams {
    pub(crate) proxy: Proxy,
}

impl MutableDelegateChainOwnershipParams {
    // next chain owner's agent ID
    pub fn chain_owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableRemoveAllowedStateControllerAddressParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableRemoveAllowedStateControllerAddressParams {
    pub fn new() -> ImmutableRemoveAllowedStateControllerAddressParams {
        ImmutableRemoveAllowedStateControllerAddressParams {
            proxy: params_proxy(),
        }
    }

    // state controller address
    pub fn address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
    }
}

#[derive(Clone)]
pub struct MutableRemoveAllowedStateControllerAddressParams {
    pub(crate) proxy: Proxy,
}

impl MutableRemoveAllowedStateControllerAddressParams {
    // state controller address
    pub fn address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
    }
}

#[derive(Clone)]
pub struct ImmutableRevokeAccessNodeParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableRevokeAccessNodeParams {
    pub fn new() -> ImmutableRevokeAccessNodeParams {
        ImmutableRevokeAccessNodeParams {
            proxy: params_proxy(),
        }
    }

    // certificate of the node to be removed
    pub fn certificate(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(PARAM_CERTIFICATE))
    }

    // public key of the node to be removed
    pub fn pub_key(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(PARAM_PUB_KEY))
    }
}

#[derive(Clone)]
pub struct MutableRevokeAccessNodeParams {
    pub(crate) proxy: Proxy,
}

impl MutableRevokeAccessNodeParams {
    // certificate of the node to be removed
    pub fn certificate(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(PARAM_CERTIFICATE))
    }

    // public key of the node to be removed
    pub fn pub_key(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(PARAM_PUB_KEY))
    }
}

#[derive(Clone)]
pub struct ImmutableRotateStateControllerParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableRotateStateControllerParams {
    pub fn new() -> ImmutableRotateStateControllerParams {
        ImmutableRotateStateControllerParams {
            proxy: params_proxy(),
        }
    }

    // state controller address
    pub fn address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
    }
}

#[derive(Clone)]
pub struct MutableRotateStateControllerParams {
    pub(crate) proxy: Proxy,
}

impl MutableRotateStateControllerParams {
    // state controller address
    pub fn address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
    }
}

#[derive(Clone)]
pub struct ImmutableSetEVMGasRatioParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetEVMGasRatioParams {
    pub fn new() -> ImmutableSetEVMGasRatioParams {
        ImmutableSetEVMGasRatioParams {
            proxy: params_proxy(),
        }
    }

    // serialized gas ratio
    pub fn gas_ratio(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(PARAM_GAS_RATIO))
    }
}

#[derive(Clone)]
pub struct MutableSetEVMGasRatioParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetEVMGasRatioParams {
    // serialized gas ratio
    pub fn gas_ratio(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(PARAM_GAS_RATIO))
    }
}

#[derive(Clone)]
pub struct ImmutableSetFeePolicyParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetFeePolicyParams {
    pub fn new() -> ImmutableSetFeePolicyParams {
        ImmutableSetFeePolicyParams {
            proxy: params_proxy(),
        }
    }

    // serialized fee policy
    pub fn fee_policy(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(PARAM_FEE_POLICY))
    }
}

#[derive(Clone)]
pub struct MutableSetFeePolicyParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetFeePolicyParams {
    // serialized fee policy
    pub fn fee_policy(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(PARAM_FEE_POLICY))
    }
}

#[derive(Clone)]
pub struct ImmutableSetGasLimitsParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetGasLimitsParams {
    pub fn new() -> ImmutableSetGasLimitsParams {
        ImmutableSetGasLimitsParams {
            proxy: params_proxy(),
        }
    }

    // serialized gas limits
    pub fn gas_limits(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.root(PARAM_GAS_LIMITS))
    }
}

#[derive(Clone)]
pub struct MutableSetGasLimitsParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetGasLimitsParams {
    // serialized gas limits
    pub fn gas_limits(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.root(PARAM_GAS_LIMITS))
    }
}

#[derive(Clone)]
pub struct ImmutableSetMetadataParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetMetadataParams {
    pub fn new() -> ImmutableSetMetadataParams {
        ImmutableSetMetadataParams {
            proxy: params_proxy(),
        }
    }

    // the public evm json rpc url
    pub fn metadata(&self) -> ImmutablePublicChainMetadata {
        ImmutablePublicChainMetadata { proxy: self.proxy.root(PARAM_METADATA) }
    }

    // the public url leading to the chain info, stored on the tangle
    pub fn public_url(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_PUBLIC_URL))
    }
}

#[derive(Clone)]
pub struct MutableSetMetadataParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetMetadataParams {
    // the public evm json rpc url
    pub fn metadata(&self) -> MutablePublicChainMetadata {
        MutablePublicChainMetadata { proxy: self.proxy.root(PARAM_METADATA) }
    }

    // the public url leading to the chain info, stored on the tangle
    pub fn public_url(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_PUBLIC_URL))
    }
}

#[derive(Clone)]
pub struct ImmutableSetMinSDParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetMinSDParams {
    pub fn new() -> ImmutableSetMinSDParams {
        ImmutableSetMinSDParams {
            proxy: params_proxy(),
        }
    }

    pub fn set_min_sd(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(PARAM_SET_MIN_SD))
    }
}

#[derive(Clone)]
pub struct MutableSetMinSDParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetMinSDParams {
    pub fn set_min_sd(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(PARAM_SET_MIN_SD))
    }
}

#[derive(Clone)]
pub struct ImmutableSetPayoutAgentIDParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetPayoutAgentIDParams {
    pub fn new() -> ImmutableSetPayoutAgentIDParams {
        ImmutableSetPayoutAgentIDParams {
            proxy: params_proxy(),
        }
    }

    // set payout AgentID
    pub fn payout_agent_id(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_PAYOUT_AGENT_ID))
    }
}

#[derive(Clone)]
pub struct MutableSetPayoutAgentIDParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetPayoutAgentIDParams {
    // set payout AgentID
    pub fn payout_agent_id(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_PAYOUT_AGENT_ID))
    }
}
